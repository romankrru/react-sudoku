import { difficulties } from "../../../../constants";
import seedToGrid from "../seed-to-grid";
import { rotate90, rotate180, rotate270 } from "../rotate";
import { flipX, flipY } from "../flip";
import generateGrid from "../";

describe("rotate", () => {
	const grid = [
		[4, 2, 0, 7, 1, 0, 0, 0, 8],
		[0, 0, 0, 0, 0, 0, 9, 4, 7],
		[7, 8, 6, 0, 0, 4, 0, 0, 0],
		[0, 0, 4, 0, 2, 9, 8, 5, 0],
		[3, 5, 0, 0, 0, 8, 0, 9, 0],
		[6, 0, 8, 3, 0, 7, 0, 0, 0],
		[0, 0, 5, 9, 3, 0, 4, 0, 2],
		[0, 4, 0, 2, 0, 0, 6, 8, 0],
		[0, 6, 7, 0, 0, 5, 1, 0, 0],
	];

	it("rotate90 should return correct result", () => {
		expect(rotate90(grid)).toEqual([
			[0, 0, 0, 6, 3, 0, 7, 0, 4],
			[6, 4, 0, 0, 5, 0, 8, 0, 2],
			[7, 0, 5, 8, 0, 4, 6, 0, 0],
			[0, 2, 9, 3, 0, 0, 0, 0, 7],
			[0, 0, 3, 0, 0, 2, 0, 0, 1],
			[5, 0, 0, 7, 8, 9, 4, 0, 0],
			[1, 6, 4, 0, 0, 8, 0, 9, 0],
			[0, 8, 0, 0, 9, 5, 0, 4, 0],
			[0, 0, 2, 0, 0, 0, 0, 7, 8],
		]);
	});

	it("rotate180 should return correct result", () => {
		expect(rotate180(grid)).toEqual([
			[0, 0, 1, 5, 0, 0, 7, 6, 0],
			[0, 8, 6, 0, 0, 2, 0, 4, 0],
			[2, 0, 4, 0, 3, 9, 5, 0, 0],
			[0, 0, 0, 7, 0, 3, 8, 0, 6],
			[0, 9, 0, 8, 0, 0, 0, 5, 3],
			[0, 5, 8, 9, 2, 0, 4, 0, 0],
			[0, 0, 0, 4, 0, 0, 6, 8, 7],
			[7, 4, 9, 0, 0, 0, 0, 0, 0],
			[8, 0, 0, 0, 1, 7, 0, 2, 4],
		]);
	});

	it("rotate270 should return correct result", () => {
		expect(rotate270(grid)).toEqual([
			[8, 7, 0, 0, 0, 0, 2, 0, 0],
			[0, 4, 0, 5, 9, 0, 0, 8, 0],
			[0, 9, 0, 8, 0, 0, 4, 6, 1],
			[0, 0, 4, 9, 8, 7, 0, 0, 5],
			[1, 0, 0, 2, 0, 0, 3, 0, 0],
			[7, 0, 0, 0, 0, 3, 9, 2, 0],
			[0, 0, 6, 4, 0, 8, 5, 0, 7],
			[2, 0, 8, 0, 5, 0, 0, 4, 6],
			[4, 0, 7, 0, 3, 6, 0, 0, 0],
		]);
	});
});

describe("flip", () => {
	const grid = [
		[4, 2, 0, 7, 1, 0, 0, 0, 8],
		[0, 0, 0, 0, 0, 0, 9, 4, 7],
		[7, 8, 6, 0, 0, 4, 0, 0, 0],
		[0, 0, 4, 0, 2, 9, 8, 5, 0],
		[3, 5, 0, 0, 0, 8, 0, 9, 0],
		[6, 0, 8, 3, 0, 7, 0, 0, 0],
		[0, 0, 5, 9, 3, 0, 4, 0, 2],
		[0, 4, 0, 2, 0, 0, 6, 8, 0],
		[0, 6, 7, 0, 0, 5, 1, 0, 0],
	];

	it("flipX should return correct result", () => {
		expect(flipX(grid)).toEqual([
			[0, 6, 7, 0, 0, 5, 1, 0, 0],
			[0, 4, 0, 2, 0, 0, 6, 8, 0],
			[0, 0, 5, 9, 3, 0, 4, 0, 2],
			[6, 0, 8, 3, 0, 7, 0, 0, 0],
			[3, 5, 0, 0, 0, 8, 0, 9, 0],
			[0, 0, 4, 0, 2, 9, 8, 5, 0],
			[7, 8, 6, 0, 0, 4, 0, 0, 0],
			[0, 0, 0, 0, 0, 0, 9, 4, 7],
			[4, 2, 0, 7, 1, 0, 0, 0, 8],
		]);
	});

	it("flipY should return correct result", () => {
		expect(flipY(grid)).toEqual([
			[8, 0, 0, 0, 1, 7, 0, 2, 4],
			[7, 4, 9, 0, 0, 0, 0, 0, 0],
			[0, 0, 0, 4, 0, 0, 6, 8, 7],
			[0, 5, 8, 9, 2, 0, 4, 0, 0],
			[0, 9, 0, 8, 0, 0, 0, 5, 3],
			[0, 0, 0, 7, 0, 3, 8, 0, 6],
			[2, 0, 4, 0, 3, 9, 5, 0, 0],
			[0, 8, 6, 0, 0, 2, 0, 4, 0],
			[0, 0, 1, 5, 0, 0, 7, 6, 0],
		]);
	});
});

describe("seedToGreed", () => {
	it("should return correct result", () => {
		const testCases = [
			{
				seed:
					"db0ga000h000000idgghf00d00000d0bihe0ce000h0i0f0hc0g00000eic0d0b0d0b00fh00fg00ea00",
				lookupArr: ["a", "b", "c", "d", "e", "f", "g", "h", "i"],
				expected: [
					[4, 2, 0, 7, 1, 0, 0, 0, 8],
					[0, 0, 0, 0, 0, 0, 9, 4, 7],
					[7, 8, 6, 0, 0, 4, 0, 0, 0],
					[0, 0, 4, 0, 2, 9, 8, 5, 0],
					[3, 5, 0, 0, 0, 8, 0, 9, 0],
					[6, 0, 8, 3, 0, 7, 0, 0, 0],
					[0, 0, 5, 9, 3, 0, 4, 0, 2],
					[0, 4, 0, 2, 0, 0, 6, 8, 0],
					[0, 6, 7, 0, 0, 5, 1, 0, 0],
				],
			},
			{
				seed:
					"ab0ga000h000000idgghf00d00000d0bihe0ce000h0i0f0hc0g00000eic0d0b0d0b00fh00fg00ea00",
				lookupArr: ["a", "b", "c", "d", "e", "f", "g", "h", "i"],
				expected: [
					[1, 2, 0, 7, 1, 0, 0, 0, 8],
					[0, 0, 0, 0, 0, 0, 9, 4, 7],
					[7, 8, 6, 0, 0, 4, 0, 0, 0],
					[0, 0, 4, 0, 2, 9, 8, 5, 0],
					[3, 5, 0, 0, 0, 8, 0, 9, 0],
					[6, 0, 8, 3, 0, 7, 0, 0, 0],
					[0, 0, 5, 9, 3, 0, 4, 0, 2],
					[0, 4, 0, 2, 0, 0, 6, 8, 0],
					[0, 6, 7, 0, 0, 5, 1, 0, 0],
				],
			},
			{
				seed:
					"db0ga000h000000idgghf00d00000d0bihe0ce000h0i0f0hc0g00000eic0d0b0d0b00fh00fg00ea00",
				lookupArr: ["b", "a", "c", "d", "e", "f", "g", "h", "i"],
				expected: [
					[4, 1, 0, 7, 2, 0, 0, 0, 8],
					[0, 0, 0, 0, 0, 0, 9, 4, 7],
					[7, 8, 6, 0, 0, 4, 0, 0, 0],
					[0, 0, 4, 0, 1, 9, 8, 5, 0],
					[3, 5, 0, 0, 0, 8, 0, 9, 0],
					[6, 0, 8, 3, 0, 7, 0, 0, 0],
					[0, 0, 5, 9, 3, 0, 4, 0, 1],
					[0, 4, 0, 1, 0, 0, 6, 8, 0],
					[0, 6, 7, 0, 0, 5, 2, 0, 0],
				],
			},
			{
				seed:
					"000000000000000000000000000000000000000000000000000000000000000000000000000000000",
				lookupArr: ["a", "b", "c", "d", "e", "f", "g", "h", "i"],
				expected: [
					[0, 0, 0, 0, 0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0, 0, 0, 0, 0],
				],
			},
			{
				seed:
					"db0ga000h000000idgghf00d00000d0bihe0ce000h0i0f0hc0g00000eic0d0b0d0b00fh00fg00ea00",
				lookupArr: ["a", "b", "c", "d", "e", "f", "g", "h", "i"],
				expected: [
					[4, 2, 0, 7, 1, 0, 0, 0, 8],
					[0, 0, 0, 0, 0, 0, 9, 4, 7],
					[7, 8, 6, 0, 0, 4, 0, 0, 0],
					[0, 0, 4, 0, 2, 9, 8, 5, 0],
					[3, 5, 0, 0, 0, 8, 0, 9, 0],
					[6, 0, 8, 3, 0, 7, 0, 0, 0],
					[0, 0, 5, 9, 3, 0, 4, 0, 2],
					[0, 4, 0, 2, 0, 0, 6, 8, 0],
					[0, 6, 7, 0, 0, 5, 1, 0, 0],
				],
			},
			{
				seed:
					"db0ga0a0h000000idgghf00d00000d0bihe0ce000h0i0f0hc0g00000eic0d0b0d0b00fh00fg00ea00",
				lookupArr: ["a", "b", "c", "d", "e", "f", "g", "h", "i"],
				expected: [
					[4, 2, 0, 7, 1, 0, 1, 0, 8],
					[0, 0, 0, 0, 0, 0, 9, 4, 7],
					[7, 8, 6, 0, 0, 4, 0, 0, 0],
					[0, 0, 4, 0, 2, 9, 8, 5, 0],
					[3, 5, 0, 0, 0, 8, 0, 9, 0],
					[6, 0, 8, 3, 0, 7, 0, 0, 0],
					[0, 0, 5, 9, 3, 0, 4, 0, 2],
					[0, 4, 0, 2, 0, 0, 6, 8, 0],
					[0, 6, 7, 0, 0, 5, 1, 0, 0],
				],
			},
		];

		for (const testCase of testCases) {
			expect(seedToGrid(testCase.seed, testCase.lookupArr)).toEqual(
				testCase.expected
			);
		}
	});
});

describe("generateGrid", () => {
	it("should generate 9x9 grid", () => {
		const grid = generateGrid(difficulties.EASY);

		expect(grid.length).toBe(9);
		expect(grid.every((row) => row.length === 9)).toBe(true);
	});
});
